/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ButtonResponse as PrismaButtonResponse } from "@prisma/client";

export class ButtonResponseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ButtonResponseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.buttonResponse.count(args);
  }

  async buttonResponses(
    args: Prisma.ButtonResponseFindManyArgs
  ): Promise<PrismaButtonResponse[]> {
    return this.prisma.buttonResponse.findMany(args);
  }
  async buttonResponse(
    args: Prisma.ButtonResponseFindUniqueArgs
  ): Promise<PrismaButtonResponse | null> {
    return this.prisma.buttonResponse.findUnique(args);
  }
  async createButtonResponse(
    args: Prisma.ButtonResponseCreateArgs
  ): Promise<PrismaButtonResponse> {
    return this.prisma.buttonResponse.create(args);
  }
  async updateButtonResponse(
    args: Prisma.ButtonResponseUpdateArgs
  ): Promise<PrismaButtonResponse> {
    return this.prisma.buttonResponse.update(args);
  }
  async deleteButtonResponse(
    args: Prisma.ButtonResponseDeleteArgs
  ): Promise<PrismaButtonResponse> {
    return this.prisma.buttonResponse.delete(args);
  }
}
